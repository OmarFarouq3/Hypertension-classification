{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "  <h2 style=\"color: #f0f0f0; font-family: 'Trebuchet MS', sans-serif;\">GamaLearn Internship Admission Project</h2>\n",
    "  <h3 style=\"color: #dcdcdc; font-family: Arial, sans-serif; margin-top: -10px;\">Omar Mohammad Farouq Abdelsalam</h3>\n",
    "  <p style=\"color: #bbbbbb; font-family: Arial, sans-serif; font-size: 14px; margin-top: -10px;\">\n",
    "     Data Science & Machine Learning Project | March 2025\n",
    "  </p>\n",
    "  <br>\n",
    "  <div style=\"background: #f5f5f5; padding: 10px; display: inline-block; border-radius: 8px;\">\n",
    "    <img src=\"Gamalearn.png\" alt=\"GamaLearn logo\" width=\"200px\">\n",
    "  </div>\n",
    "</center>\n",
    "<hr style=\"border: 1px solid #666; width: 90%;\">\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details open>\n",
    "  <summary><u><strong>Contents</strong></u></summary>\n",
    "  <br>\n",
    "  <ul>\n",
    "    <li><a href=\"#problem-statement\"><font size=4>1.0 Problem Statement: Medical Hypertension Study</font></a>\n",
    "      <ul>\n",
    "        <li><a href=\"#introduction\"><font size=4>1.1 Introduction</font></a></li>\n",
    "        <li><a href=\"#objective\"><font size=4>1.2 Objective</font></a></li>\n",
    "        <li><a href=\"#algorithms\"><font size=4>1.3 Algorithms</font></a></li>\n",
    "      </ul>\n",
    "    </li>\n",
    "    <li><a href=\"#related-works\"><font size=4>2.0 Related Works</font></a></li>\n",
    "    <li><a href=\"#preprocessing\"><font size=4>3.0 Data Exploration & Preprocessing</font></a>\n",
    "      <ul>\n",
    "        <li><a href=\"#data-loading\"><font size=4>3.1 Data Loading</font></a></li>\n",
    "        <li><a href=\"#feature-understanding\"><font size=4>3.2 Feature Understanding</font></a></li>\n",
    "        <li><a href=\"#data-cleaning\"><font size=4>3.3 Data Cleaning</font></a></li>\n",
    "        <li><a href=\"#eda\"><font size=4>3.4 Exploratory Data Analysis (EDA)</font></a></li>\n",
    "        <li><a href=\"#feature-engineering\"><font size=4>3.5 Feature Engineering & Scaling</font></a></li>\n",
    "      </ul>\n",
    "    </li>\n",
    "    <li><a href=\"#model-building\"><font size=4>4.0 Model Building</font></a>\n",
    "      <ul>\n",
    "        <li><a href=\"#train-test-split\"><font size=4>4.1 Train-Test Split</font></a></li>\n",
    "        <li><a href=\"#baseline-model\"><font size=4>4.2 Baseline Model</font></a></li>\n",
    "        <li><a href=\"#classifier-training\"><font size=4>4.3 Multiple Classifiers Training</font></a></li>\n",
    "      </ul>\n",
    "    </li>\n",
    "    <li><a href=\"#model-evaluation\"><font size=4>5.0 Model Evaluation</font></a>\n",
    "      <ul>\n",
    "        <li><a href=\"#evaluation-metrics\"><font size=4>5.1 Evaluation Metrics</font></a></li>\n",
    "        <li><a href=\"#confusion-matrices\"><font size=4>5.2 Confusion Matrices</font></a></li>\n",
    "        <li><a href=\"#models-comparison\"><font size=4>5.3 Models Comparison</font></a></li>\n",
    "        <li><a href=\"#visualizations\"><font size=4>5.4 Visualizations</font></a></li>\n",
    "      </ul>\n",
    "    </li>\n",
    "    <li><a href=\"#conclusion\"><font size=4>6.0 Conclusion</font></a></li>\n",
    "    <li><a href=\"#github-repo\"><font size=4>7.0 GitHub Repository (Optional)</font></a></li>\n",
    "  </ul>\n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>  <h2>   1.0 Problem Statement: Medical Hypertension Study </h2>  </center>\n",
    "<a id=\"problem-statement\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">1.1 Introduction</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #f0f0f0; font-size: 15px;\">\n",
    "\n",
    "\n",
    "<a id=\"introduction\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<!-- Body Content -->\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Hypertension, or high blood pressure, is one of the most prevalent forms of cardiovascular disease in the world. Hypertension arises when blood is pumped through arteries at a higher rate than normal blood pressure, generating long-term effects and issues related to health, such as heart disease, strokes, kidney failure, and more. Hypertension is estimated to cause about 7.5 million deaths globally each year, representing about 12.8% of all deaths, as diagnosed by the World Health Organization (WHO).\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Detecting hypertension sooner is vital. It creates opportunities for early interventions and prevents the gradual decline of chronic health. Being a supposedly symptomless progressive disease, many individuals remain unaware they are hypertensive and unaware of permanent damage until it is too late to intervene and prevent more serious diseases.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Predicting hypertension allows for healthcare providers to make the best evidence-based decisions, provide and undertake early interventions, and help improve health outcomes. Analysis of medical data utilizing machine learning abilities can help gather hidden patterns and discover complex relationships to improve and provide as many effective healthcare prevention and treatment strategies as possible.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "This project will use the given hypertension dataset to demonstrate various machine learning modalities through data analysis, data visualization, model development, and an algorithmic evaluation of the created model utilizing classifiers.\n",
    "</p>\n",
    "\n",
    "<!-- Anchor for navigation (if needed) -->\n",
    "<a id=\"introduction\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">1.2 Objectives</h3>\n",
    "</center>\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #f0f0f0; font-size: 15px;\">\n",
    "\n",
    "<a id=\"objective\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<!-- Body Content -->\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "The essential goal of this project is to develop and complete the classification of individuals as Positive (Hypertensive) or Negative (Non-Hypertensive) by forming models that use clinical and demographic features from the dataset. More specifically, the project will accomplish the following tasks:\n",
    "</p>\n",
    "\n",
    "<!-- Numbered List -->\n",
    "<ol style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.8;\">\n",
    "  <li>Examine through data analysis and visualization techniques and understand the hypertension dataset.</li>\n",
    "  <li>The data will be preprocessed for machine learning models such as handling missing values, feature scaling and the data splitting.</li>\n",
    "  <li>Use the best algorithms suitable for the binary classification task. They can be, for example, Support Vector Machine (SVM), K-Nearest Neighbors (KNN), Random Forest and others.</li>\n",
    "  <li>Determine how well the models perform using evaluation metrics such as accuracy, precision, recall, F1-Score, and confusion matrices.</li>\n",
    "  <li> Demonstrating the performance of these models through the visualization of confusion matrices and ROC curves and performing other relevant performance comparisonsâ€¦</li>\n",
    "  <li>Derive findings and insights from the analysis to identify the model that predicts hypertension most accurately.</li>\n",
    "</ol>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!-- Section Title -->\n",
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">1.3 Algorithms </h3>\n",
    "</center>\n",
    "\n",
    "<!-- Divider -->\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n",
    "<!-- Body Content -->\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "To deal with the binary classification problem of predicting hypertensive (Positive) versus non-hypertensive (Negative) individuals, this project will use several machine learning algorithms. Each of these algorithms has been picked as they have proved to classify well, specifically in medical datasets.\n",
    "</p>\n",
    "\n",
    "<!-- Bullet List -->\n",
    "<ul style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.8;\">\n",
    "  <li><strong>Support Vector Machine (SVM)</strong>: Can cope excellently with high-dimensional data and is suitable for dealing with both linear and nonlinear relationships, whose shapes can be changed by different kernels (e.g., RBF).</li>\n",
    "  <li><strong>K-Nearest Neighbors (KNN)</strong>:  A simplistic but lazy learning algorithm that makes predictions based on the nearness of data points in the feature space.</li>\n",
    "  <li><strong>Random Forest</strong>: An ensemble method that runs multiple decision trees and puts together their outputs for better and more accurate classification results. Additionally, it presents a distribution of the feature importance.</li>\n",
    "  <li><strong>Logistic Regression</strong>: A flexible linear model that is widely used in the area of binary classification, its advantage is interpretability, and this is a benchmark model among others.</li>\n",
    "  <li><strong>Naive Bayes</strong>: Is a classification algorithm that is probabilistic. It makes a naive assumption that the features are all independent of each other given a class label (hence, \"naive\"). The particular functionality of it is especially significant for data predictive outcomes where the number of attributes per sample is very high and also when smaller training data is used it becomes faster, which is a major need in many cases.</li>\n",
    "</ul>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "These models will be tested and contrasted to decide which one is the best performer for hypertension prediction in the provided dataset.</p>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<!-- Subsection Title -->\n",
    "<center> \n",
    "  <h4 style=\"color: #87cefa; font-family: 'Trebuchet MS', sans-serif;\">1.3.1 Why These Algorithms for Hypertension?</h4>\n",
    "</center>\n",
    "\n",
    "<!-- Subsection Divider (thinner or shorter) -->\n",
    "<hr style=\"border: 0.8px solid #87cefa; width: 30%;\">\n",
    "\n",
    "<!-- Body Content -->\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 13.5px; line-height: 1.6;\">\n",
    "This project of hypertension prediction is the basis of analyzing clinical factors such as age, resting blood pressure, cholesterol levels, electrocardiographic results, heart rate responses, and angiographic results. These characteristics give a detailed description of clinical events that help to evaluate the risk of hypertensive or cardiovascular diseases. Here is the reason for the chosen algorithm being fit for the problem:\n",
    "\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 13.5px; line-height: 1.8;\">\n",
    "<li><strong>Support Vector Machine (SVM)</strong>:  Data for hypertension can be so complicated by the decision lines where the risk factors such as age, cholesterol, resting blood pressure, and ECG results that the patients may not be separated linearly as hypertensive from non-hypertensive. SVM, in particular, with the RBF kernel, excellently captures these nonlinear separations not only in terms of model performance but also is well-suited for high-dimensional clinical datasets often used in healthcare.</li>\n",
    "\n",
    "  <li><strong>K-Nearest Neighbors (KNN)</strong>:  In the medical data, patients often share the same diagnoses. KNN makes aviation to this field by locating patients in a similarity which is to be close to known cases (neighbors) in the feature space. It is interesting in finding out the small regions of the clusters that denote hypertension hazard due to the behavior.</li>\n",
    "\n",
    "<li><strong>Random Forest</strong>:  Hypertension can be affected by many symptoms that act together to harm the body. Random Forest is good because it can help model non-linear relationships, remove outliers, and thus, automatically rank the importance of features. This aids healthcare providers in pinpointing the most predictive factors, such as the levels of cholesterol, the patients' blood pressure at rest, or the maximum heart rate they can attain.</li>\n",
    "\n",
    "  <li><strong>Logistic Regression</strong>: Logistic Regression provides a clear and interpretable model, making it useful when transparency is crucial for medical decisions. Its coefficients directly show how each feature affects the probability of hypertension, which is essential for practitioners who need to understand the modelâ€™s rationale.</li>\n",
    "\n",
    "  <li><strong>Naive Bayes</strong>: The main reason for the Naive Bayes choice was the simplicity, speed, and effectiveness of the high-dimensional sets. Despite its basic assumption of feature independence, it is often the case that it works very well in problems such as classification in medicine. The Naive Bayes is a simple and interpretable model, which is beside the more complex classifiers such as Random Forest and SVM.</li>\n",
    "</ul>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 13.5px; line-height: 1.6;\">\n",
    "These algorithms will be effective in capturing all types of relationships present in this dataset, since the dataset is medical so we can expect a more complex nature, involving a lot of relationships.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 13.5px; line-height: 1.6;\">\n",
    "By applying these algorithms, the project aims to balance interpretability (e.g., Logistic Regression, Random Forest) with predictive power (e.g., SVM) to find the most effective model for hypertension classification.\n",
    "</p>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>  <h2>   2.0 Related Works </h2>  </center>\n",
    "\n",
    "<!-- Section Title -->\n",
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">2.1 Short Literature Review </h3>\n",
    "</center>\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Modern techniques in machine learning have greatly accelerated early prediction and classification of hypertension with the application of clinical and lifestyle datasets. Jayakumar et al., in one such study, made a comparison of the performances of different machine learning models such as Decision Trees, Naive Bayes, Random Forest, and SVM. Random Forest was consistently the best with accuracies greater than 90% in multiple clinical datasets **[1]**. Their work pointed to the power of ensemble learning in capturing the complex relationships existing in health data.\n",
    "\n",
    "A closely related review by Adawiyah et al. described the performance of several traditional ML classifiers for predicting hypertension, and it noted that K-Nearest Neighbors (KNN) seemed to have the highest accuracy but was quite sensitive to data imbalance, thus resulting in overfitting tendencies **[2]**. This fit almost perfectly with the present work, where KNN gave almost perfect predictions that warranted more investigation by way of cross-validation to ascertain reliability.\n",
    "\n",
    "Khan and Anwar undertook a case study in the application of Random Forest, XGBoost, and SVM on local population datasets with hyperparameter tuning aimed at optimizing the result **[3]**. XGBoost was thus said to have the best F1-score (92.4%), affirming its relevance in the medical classification of nonlinear patterns and complex features. This reinforces the choice of XGBoost in the contrasting models of this study.\n",
    "\n",
    "In extension, Hasan et al. considered early-hypertension prediction using EHRs and lifestyle features, comparing Logistic Regression, Gradient Boosting, and neural networks **[4]**. It was found that Gradient Boosting had performed quite well in maintaining a strong recall and precision trade-off, which is most desirable when both false-positive and false-negative predictions come at a premium cost. This makes Gradient Boosting relevant in healthcare settings where actionable predictive information is required.\n",
    "\n",
    "Lastly, Chauhan and Patel highlighted the problem of dataset imbalance in hypertension classification and addressed it using SMOTE combined with Random Forest and XGBoost **[5]**. Their work revealed impressive improvements in recall upon equalizing class distributions, especially in minority (hypertensive) case detection. This increases awareness regarding class imbalances in real-life datasets and proposes that with even better imputation techniques applied, the results of this project can be made better in subsequent editions.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<hr>\n",
    "<h3>References</h3>\n",
    "\n",
    "<p><strong>[1]</strong> Jayakumar, N., Revathi, R., & Prabhavathy, P. R. (2020). A survey of machine learning approaches for hypertension risk prediction. *Procedia Computer Science*, 171, 1985â€“1994.</p>\n",
    "\n",
    "<p><strong>[2]</strong> Adawiyah, R., Rezkita, R., & Primartha, R. (2021). Predicting hypertension using machine learning: A review. *IEEE Access*, 9, 114301â€“114312.</p>\n",
    "\n",
    "<p><strong>[3]</strong> Khan, R., & Anwar, S. (2022). Machine learning models for hypertension risk prediction: A case study. *BioMed Research International*, 2022, Article ID 6808512.</p>\n",
    "\n",
    "<p><strong>[4]</strong> Hasan, M. K., Al Mamun, M. A., & Ahmed, M. U. (2023). Early detection of hypertension using machine learning techniques. *Computers in Biology and Medicine*, 152, 106308.</p>\n",
    "\n",
    "<p><strong>[5]</strong> Chauhan, A., & Patel, N. (2022). Application of ML algorithms in predicting hypertension with imbalanced datasets. *arXiv preprint arXiv:2205.01138*.</p>\n",
    "\n",
    "\n",
    "\n",
    "<hr>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h2>3.0 Data Exploration & Preprocessing</h2></center>\n",
    "<a id=\"preprocessing\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">3.1 Data Loading </h3>\n",
    "</center>\n",
    "\n",
    "<!-- Divider -->\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n",
    "Importing libraries and dataset.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'hypertension_data 2 (1).csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mFileNotFoundError\u001b[39m                         Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 31\u001b[39m\n\u001b[32m     27\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mplotly\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mexpress\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mpx\u001b[39;00m                \u001b[38;5;66;03m# For simple, expressive plotting\u001b[39;00m\n\u001b[32m     28\u001b[39m \u001b[38;5;28;01mimport\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mseaborn\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mas\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01msns\u001b[39;00m                      \u001b[38;5;66;03m# Another plotting library\u001b[39;00m\n\u001b[32m---> \u001b[39m\u001b[32m31\u001b[39m df = \u001b[43mpd\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mhypertension_data 2 (1).csv\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[32m     32\u001b[39m df.head(\u001b[32m5\u001b[39m)\n",
      "\u001b[36mFile \u001b[39m\u001b[32mc:\\Users\\ASUS\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1026\u001b[39m, in \u001b[36mread_csv\u001b[39m\u001b[34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[39m\n\u001b[32m   1013\u001b[39m kwds_defaults = _refine_defaults_read(\n\u001b[32m   1014\u001b[39m     dialect,\n\u001b[32m   1015\u001b[39m     delimiter,\n\u001b[32m   (...)\u001b[39m\u001b[32m   1022\u001b[39m     dtype_backend=dtype_backend,\n\u001b[32m   1023\u001b[39m )\n\u001b[32m   1024\u001b[39m kwds.update(kwds_defaults)\n\u001b[32m-> \u001b[39m\u001b[32m1026\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32mc:\\Users\\ASUS\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:620\u001b[39m, in \u001b[36m_read\u001b[39m\u001b[34m(filepath_or_buffer, kwds)\u001b[39m\n\u001b[32m    617\u001b[39m _validate_names(kwds.get(\u001b[33m\"\u001b[39m\u001b[33mnames\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[32m    619\u001b[39m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m620\u001b[39m parser = \u001b[43mTextFileReader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    622\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[32m    623\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n",
      "\u001b[36mFile \u001b[39m\u001b[32mc:\\Users\\ASUS\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1620\u001b[39m, in \u001b[36mTextFileReader.__init__\u001b[39m\u001b[34m(self, f, engine, **kwds)\u001b[39m\n\u001b[32m   1617\u001b[39m     \u001b[38;5;28mself\u001b[39m.options[\u001b[33m\"\u001b[39m\u001b[33mhas_index_names\u001b[39m\u001b[33m\"\u001b[39m] = kwds[\u001b[33m\"\u001b[39m\u001b[33mhas_index_names\u001b[39m\u001b[33m\"\u001b[39m]\n\u001b[32m   1619\u001b[39m \u001b[38;5;28mself\u001b[39m.handles: IOHandles | \u001b[38;5;28;01mNone\u001b[39;00m = \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m1620\u001b[39m \u001b[38;5;28mself\u001b[39m._engine = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_make_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32mc:\\Users\\ASUS\\anaconda3\\Lib\\site-packages\\pandas\\io\\parsers\\readers.py:1880\u001b[39m, in \u001b[36mTextFileReader._make_engine\u001b[39m\u001b[34m(self, f, engine)\u001b[39m\n\u001b[32m   1878\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[33m\"\u001b[39m\u001b[33mb\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m mode:\n\u001b[32m   1879\u001b[39m         mode += \u001b[33m\"\u001b[39m\u001b[33mb\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m-> \u001b[39m\u001b[32m1880\u001b[39m \u001b[38;5;28mself\u001b[39m.handles = \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   1881\u001b[39m \u001b[43m    \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1882\u001b[39m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1883\u001b[39m \u001b[43m    \u001b[49m\u001b[43mencoding\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mencoding\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1884\u001b[39m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mcompression\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1885\u001b[39m \u001b[43m    \u001b[49m\u001b[43mmemory_map\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mmemory_map\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1886\u001b[39m \u001b[43m    \u001b[49m\u001b[43mis_text\u001b[49m\u001b[43m=\u001b[49m\u001b[43mis_text\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1887\u001b[39m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mencoding_errors\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mstrict\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1888\u001b[39m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mstorage_options\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1889\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1890\u001b[39m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m.handles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[32m   1891\u001b[39m f = \u001b[38;5;28mself\u001b[39m.handles.handle\n",
      "\u001b[36mFile \u001b[39m\u001b[32mc:\\Users\\ASUS\\anaconda3\\Lib\\site-packages\\pandas\\io\\common.py:873\u001b[39m, in \u001b[36mget_handle\u001b[39m\u001b[34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[39m\n\u001b[32m    868\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[32m    869\u001b[39m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[32m    870\u001b[39m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[32m    871\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m ioargs.encoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[33m\"\u001b[39m\u001b[33mb\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs.mode:\n\u001b[32m    872\u001b[39m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m873\u001b[39m         handle = \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[32m    874\u001b[39m \u001b[43m            \u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    875\u001b[39m \u001b[43m            \u001b[49m\u001b[43mioargs\u001b[49m\u001b[43m.\u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    876\u001b[39m \u001b[43m            \u001b[49m\u001b[43mencoding\u001b[49m\u001b[43m=\u001b[49m\u001b[43mioargs\u001b[49m\u001b[43m.\u001b[49m\u001b[43mencoding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    877\u001b[39m \u001b[43m            \u001b[49m\u001b[43merrors\u001b[49m\u001b[43m=\u001b[49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    878\u001b[39m \u001b[43m            \u001b[49m\u001b[43mnewline\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m    879\u001b[39m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    880\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    881\u001b[39m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[32m    882\u001b[39m         handle = \u001b[38;5;28mopen\u001b[39m(handle, ioargs.mode)\n",
      "\u001b[31mFileNotFoundError\u001b[39m: [Errno 2] No such file or directory: 'hypertension_data 2 (1).csv'"
     ]
    }
   ],
   "source": [
    "# - Data Manipulation and Preprocessing\n",
    "import pandas as pd                                           # For handling datasets and data manipulation\n",
    "from sklearn.preprocessing import MinMaxScaler, LabelEncoder  # For scaling and encoding data\n",
    "import numpy as np                                            # For manipulating numeric values\n",
    "\n",
    "# - Model Building\n",
    "\n",
    "# For splitting data and hyperparameter tuning\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score    \n",
    "\n",
    "from sklearn.metrics import (\n",
    "    accuracy_score,         # For evaluating model accuracy\n",
    "    classification_report,  # For detailed classification metrics\n",
    "    confusion_matrix,       # For confusion matrix calculation\n",
    "    ConfusionMatrixDisplay, # For visualizing the confusion matrix\n",
    "    roc_auc_score,          # For calculating ROC-AUC score\n",
    "    roc_curve               # For generating ROC curve data\n",
    ")\n",
    "\n",
    "# - Machine Learning Models\n",
    "import xgboost as xgb                                # For XGBoost classifier\n",
    "from sklearn.svm import SVC                          # For Support Vector Classifier (SVM)\n",
    "from sklearn.ensemble import RandomForestClassifier  # For Random Forest Classifier\n",
    "\n",
    "# - Visualization\n",
    "import matplotlib.pyplot as plt            # For plotting static visualizations\n",
    "import plotly.express as px                # For simple, expressive plotting\n",
    "import seaborn as sns                      # Another plotting library\n",
    "\n",
    "\n",
    "df = pd.read_csv('hypertension_data 2 (1).csv')\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">3.2 Feature Understanding</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "This dataset consists of clinical and diagnostic features that are commonly associated with hypertension or cardiovascular risks. Below is a description of each feature along with its potential relevance to hypertension prediction:\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.8;\">\n",
    "\n",
    "  <li><strong>age</strong>: Age of the patient (in years). Increasing age is a well-known risk factor for hypertension and cardiovascular diseases.</li>\n",
    "\n",
    "  <li><strong>sex</strong>: Gender of the patient (1 = male, 0 = female). Males may have different risk profiles compared to females in certain age groups regarding hypertension.</li>\n",
    "\n",
    "  <li><strong>cp (chest pain type)</strong>: Type of chest pain experienced. Some types of chest pain (e.g., typical angina) may be related to cardiovascular issues, which can co-occur with hypertension.</li>\n",
    "\n",
    "  <li><strong>trestbps (resting blood pressure)</strong>: Blood pressure measured at rest (mm Hg). One of the most direct indicators of hypertension risk.</li>\n",
    "\n",
    "  <li><strong>chol (serum cholesterol)</strong>: Cholesterol level in mg/dl. Elevated cholesterol can contribute to arterial plaque buildup, increasing blood pressure and cardiovascular risk.</li>\n",
    "\n",
    "  <li><strong>fbs (fasting blood sugar > 120 mg/dl)</strong>: Indicates if fasting blood sugar is above normal levels (1 = True, 0 = False). Diabetes and elevated glucose levels are often comorbid with hypertension.</li>\n",
    "\n",
    "  <li><strong>restecg (resting electrocardiographic results)</strong>: Results from ECG at rest. Abnormalities here may indicate underlying heart conditions linked to hypertension.</li>\n",
    "\n",
    "  <li><strong>thalach (maximum heart rate achieved)</strong>: The highest heart rate recorded during exercise. Lower values might be associated with cardiac limitations related to hypertensive conditions.</li>\n",
    "\n",
    "  <li><strong>exang (exercise-induced angina)</strong>: Whether angina occurs during exercise (1 = Yes, 0 = No). Angina during exertion can signal heart stress that may be associated with hypertension.</li>\n",
    "\n",
    "  <li><strong>oldpeak (ST depression)</strong>: ST depression induced by exercise relative to rest. A clinical marker often used to assess ischemic heart disease risk, which can be related to hypertension.</li>\n",
    "\n",
    "  <li><strong>slope</strong>: The slope of the peak exercise ST segment. Variations can indicate cardiac abnormalities that may correlate with hypertension risk.</li>\n",
    "\n",
    "  <li><strong>ca</strong>: Number of major vessels (0â€“3) colored by fluoroscopy. More visible vessels may suggest less blockage, while fewer may indicate cardiovascular issues that can be worsened by hypertension.</li>\n",
    "\n",
    "  <li><strong>thal</strong>: Thalassemia-related test results (1 = normal; 2 = fixed defect; 3 = reversible defect). This can give further insight into the heartâ€™s health and structural abnormalities.</li>\n",
    "\n",
    "  <li><strong>target</strong>: The class label (1 = hypertensive/positive, 0 = non-hypertensive/negative). This is the target variable for classification.</li>\n",
    "\n",
    "</ul>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Each feature provides clinical information that may contribute to the patient's likelihood of being hypertensive and will be used by the machine learning models for classification.\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">3.3 Data Cleaning</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n",
    "<a id=\"data-cleaning\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Dropping Irrelevant Columns**\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "During the data cleaning phase, the dataset was scrutinized to find out which rows were unimportant and do not impact the prediction of hypertension. To withhold only the features that are paramount to the model training by including only relevant and informative clinical features and remove any redundant or non-informative data is the target.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Each column was evaluated based on its medical significance, relevance to cardiovascular and hypertensive conditions, and its potential predictive power.\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "All the values were used for the research. Therefore, it is okay to maintain all the clinical features. Later, we can do a feature importance analysis and remove the ones that are not important."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for missing values\n",
    "df.isnull().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# You can notice that there are 25 missing values for sex, so I'll drop rows with missing sex.\n",
    "df.dropna(subset=['sex'], inplace=True)\n",
    "df.isnull().sum()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Handling Missing Values in the sex Column**\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "After examining the dataset, it was seen that the sex column had 25 missing values, while all the other features were complete. Since sex is a strategically important feature for hypertension prediction it was a necessity to cope with these missing values before model.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Two possible strategies were considered:\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.8;\">\n",
    "  <li>Option 1:  Drop the rows where sex has not been recorded.</li>\n",
    "  <li>Option 2: Fill the missing values by replacing them with the mode (or most frequent value) of the column.</li>\n",
    "</ul>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Upon the assessment of both options, it was Option 1 that got the most votes. Since only 25 entries were affected out of a relatively great dataset, dropping them led to a little data loss only. In addition, this approach averted any assumptions or bias since no medical data was biased by arbitrarily assigning gender values.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for duplicates\n",
    "df.duplicated().sum()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Checking for Duplicate Records**\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Prior to the modeling process, the data set was carefully checked for duplicate records via the df.duplicated().sum() function. When the same piece of data is stored more than once, it will weaken the model in most cases due to repeat cases or oversights, e.g. in the case of healthcare data, where each patient's case should be different.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "After running the check, the result indicated zero duplicated rows in the dataset. This means that all entries are unique and no data needed to be removed at this stage.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Verifying the uniqueness of records ensures that each observation contributes fairly and independently to the learning process.\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Handling Categorical Features**\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "One very important thing to do before starting any machine learning model is to check if all the categorical variables are in a numerical format. Almost all machine learning algorithms are unable to guess text or category labels unless the labels are encoded correctly.</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "In this dataset, categorical features such as sex, cp (chest pain type), that (thalassemia test), restecg (ECG results), and others are already provided in a numerical format. This suggests that encoding has already been applied.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Since the dataset already uses numeric codes, no additional encoding is required at this stage. \n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Outlier Detection and Evaluation**\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "The values are called outliers when they deviate from consecutive values of a feature. Clinical cases (for example, the high level of blood pressure) may constitute such outliers in medical datasets, but at the same time, there could also be entries of errors (e.g., zero cholesterol).\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "It is requisite to visualize the data first and see the boxplots to be able to decide whether to remove the outliers. As a result, this will help us to be able to differentiate the real legitimate limits from the unrealistic or errors of the values.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Only those outliers that are clearly invalid, such as biologically impossible values, will be considered for removal. All other clinically plausible outliers will be retained to preserve the integrity and diversity of the dataset.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "This approach ensures that we do not unintentionally discard important patterns that could contribute to more accurate and realistic model training.\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking for continuous features\n",
    "# Define numeric columns to check for outliers\n",
    "numeric_cols = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']\n",
    "\n",
    "# Generate boxplots for each column\n",
    "for col in numeric_cols:\n",
    "    plt.figure(figsize=(6, 3))\n",
    "    sns.boxplot(data=df, x=col, color='skyblue')\n",
    "    plt.title(f'Boxplot of {col}', fontsize=12)\n",
    "    plt.xlabel(col, fontsize=10)\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking for binary and categorical values\n",
    "\n",
    "df['sex'].value_counts()\n",
    "df['fbs'].value_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Outlier Review Summary\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Even though I got outliers, there were no obvious severe or questionable anomalies which I would have detected by removing them. Only a few measurements were at the extreme top or bottom, and they were still accepted as reasonable because they were illustrative of possible real-life hypertension cases.\n",
    "</p>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "As a result of this process, none of the data points were excluded at the stage of outlier detection, thus, all the records have been stored with the aim of maintaining the consistency and variability of the data.\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">3.4 Explarotary Data Analysis</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n",
    "\n",
    "\n",
    "<a id=\"eda\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Univariate Analysis:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Countplot for target (positive/negative)\n",
    "\n",
    "sns.countplot(x='target', data=df)\n",
    "plt.title('Target Class Distribution')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Histogram\n",
    "\n",
    "df['age'].hist(bins=30)\n",
    "plt.title('Age Distribution')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Count')\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Class Balance Observation\n",
    "\n",
    "During the univariate analysis, we did a study of the distribution of the target variable between hypertensive (1) and non-hypertensive (0) cases. The outcome was that this dataset is more or less evenly distributed, and that each class has more or less the same number of samples in it. \n",
    "\n",
    "This is a relevant finding as an unbalanced class can negatively affect the training of a model, consequently, leading to biased predictions mainly in medical datasets where minority classes are known to be underrepresented. In case no significant class imbalances are identified, there is no necessity to apply rules of oversampling or undersampling techniques (e.g., SMOTE or random sampling). This enables the classification models to be taught by the data with no distortion due to balancing with the artificial generated data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Bivariate Analysis:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# barplot\n",
    "\n",
    "sns.barplot(x='sex', y='target', data=df)\n",
    "plt.title('Sex vs Hypertension Class')\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(14, 14))\n",
    "sns.heatmap(df.corr(), annot=True, cmap='coolwarm')\n",
    "plt.title('Correlation Heatmap')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature vs target boxplot\n",
    "\n",
    "sns.boxplot(x='target', y='age', data=df)\n",
    "plt.title('Age vs Hypertension Target')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Why These Visualizations Were Chosen\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Upon analyzing the hypertension dataset, several visualizations were chosen by their nature of features concerning categorical vs. continuous and analysis type (univariate vs. bivariate). The main intention here was to identify regularities, relationships, and almost trivial cases that may alter the model performance.\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px;\">\n",
    "  <li>Countplots were used to visualize the distribution of categorical variables such as sex, cp</code>, and target. These help identify class imbalances or dominant categories.</li>\n",
    "  <li>Histograms were used to observe the distribution of continuous features like age, chol, and thalach. They highlight skewness, central tendency, and clustering.</li>\n",
    "  <li>Boxplots helped detect potential outliers and compare distributions across classes (e.g., age or chol vs. target).</li>\n",
    "  <li>Barplots were applied for comparing categorical features with the binary target variable (e.g., cp vs. target), showing mean likelihoods across groups.</li>\n",
    "  <li>Correlation Heatmap was included to provide an overall view of feature correlations, aiding in feature selection and interpretation.</li>\n",
    "</ul>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc;\">\n",
    "These charts were selected for their clarity, relevance to binary classification, and interpretability in a medical data context.\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Key Insights from the Visualizations\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px; line-height: 1.6;\">\n",
    "Important information about the distribution and connections within the dataset was revealed by exploratory visualizations. The following are the main conclusions:\n",
    "</p>\n",
    "\n",
    "<ul style=\"font-family: Arial, sans-serif; color: #dcdcdc; font-size: 14px;\">\n",
    "  <li>Target Distribution: A fairly balanced distribution of hypertensive (positive) and non-hypertensive (negative) people was displayed in the countplot.</li>\n",
    "  <li>Age and Cholesterol: The distribution of both features was skewed to the right, with some high values being kept because they were thought to be clinically plausible.</li>\n",
    "  <li>Type of Chest Pain: There may be a connection between hypertension and the higher frequency of some types of chest pain (such as type 3, which is asymptomatic).</li>\n",
    "  <li>Oldpeak and resting blood pressure varied by target class, with hypertensive patients typically having higher readings.</li>\n",
    "  <li>The majority of features displayed weak to moderate correlation with the target, according to the correlation heatmap, suggesting that the model will require the combination of several features in order to classify data accurately.</li>\n",
    "</ul>\n",
    "\n",
    "<p style=\"font-family: Arial, sans-serif; color: #dcdcdc;\">\n",
    "Overall, the EDA confirmed that the dataset is rich in clinically relevant features, with no major issues of imbalance or noise that would require additional preprocessing.\n",
    "</p>\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">3.5 Feature Engineering And Scaling</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n",
    "\n",
    "Feature selection was not used in this project. A small number of distinct clinical and demographic characteristics are already present in the dataset, the majority of which may be pertinent to the prediction of hypertension. Eliminating any of these could result in the loss of important data. \n",
    "\n",
    "Using more selection methods would not significantly improve model performance because the feature set is already condensed and interpretable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Scaling\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Initialize scaler and apply it on the training and testing data\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Feature scaling was applied using StandardScaler to normalize the input features. This ensures that all features contribute equally to the learning process, especially for algorithms sensitive to feature magnitude such as KNN and SVM."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"model-building\"></a>\n",
    "\n",
    "\n",
    "---\n",
    "\n",
    "<center><h2>4.0 Model Building</h2></center>\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">4.1 Train Test-Split</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Split features and target\n",
    "X = df.drop('target', axis=1)\n",
    "y = df['target']\n",
    "\n",
    "# Perform train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note why I chose this split  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# scaler = StandardScaler()\n",
    "# X_train_scaled = scaler.fit_transform(X_train)\n",
    "# X_test_scaled = scaler.transform(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">4.2 Baseline Model</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Logistic Regression - Model Creation and Training\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Train baseline model with increased iteration limit\n",
    "baseline_model = LogisticRegression(max_iter=1000)\n",
    "baseline_model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">4.3 Multiple Classifier Training</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# SVM Model - Creation and Training\n",
    "\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "# Initialize the SVM classifier (RBF kernel is default)\n",
    "svm_model = SVC(kernel='rbf', random_state=42)\n",
    "\n",
    "# Train the model\n",
    "svm_model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# KNN Model - Creation and Training\n",
    "\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "# Initialize and train the KNN model\n",
    "knn_model = KNeighborsClassifier(n_neighbors=5)  # You can tune this later\n",
    "knn_model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for k in range(1, 11):\n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    knn.fit(X_train, y_train)\n",
    "    y_pred = knn.predict(X_test)\n",
    "    print(f\"K={k} | Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random Forest - Model Training\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Initialize and train Random Forest\n",
    "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "rf_model.fit(X_train, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Naive Bayes - Model Training\n",
    "\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "# Initialize and train the model\n",
    "nb_model = GaussianNB()\n",
    "nb_model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"model-evaluation\"></a>\n",
    "\n",
    "---\n",
    "\n",
    "<center><h2>5.0 Models Evaluation</h2></center>\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">5.1 Evaluation Metrics</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Logistic Regression - Prediction and Evaluation\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
    "\n",
    "# Predict on test data\n",
    "y_pred_baseline = baseline_model.predict(X_test)\n",
    "\n",
    "# Evaluate baseline performance\n",
    "print(\"Baseline Model Performance (Logistic Regression):\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_baseline))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred_baseline))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred_baseline))\n",
    "print(\"F1 Score:\", f1_score(y_test, y_pred_baseline))\n",
    "print(\"\\n\")\n",
    "print(classification_report(y_test, y_pred_baseline))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# SVM Model - Prediction and Evaluation\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
    "\n",
    "# Predict on test set\n",
    "y_pred_svm = svm_model.predict(X_test)\n",
    "\n",
    "# Evaluate the model\n",
    "print(\"SVM Model Performance:\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_svm))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred_svm))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred_svm))\n",
    "print(\"F1 Score:\", f1_score(y_test, y_pred_svm))\n",
    "print(\"\\n\")\n",
    "print(classification_report(y_test, y_pred_svm))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# KNN Model - Prediction and Evaluation\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
    "\n",
    "# Predict on the test set\n",
    "y_pred_knn = knn_model.predict(X_test)\n",
    "\n",
    "# Evaluate KNN performance\n",
    "print(\"K-Nearest Neighbors Model Performance:\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_knn))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred_knn))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred_knn))\n",
    "print(\"F1 Score:\", f1_score(y_test, y_pred_knn))\n",
    "print(\"\\n\")\n",
    "print(classification_report(y_test, y_pred_knn))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "import numpy as np\n",
    "\n",
    "# Rerun with shuffled dataset (only for validation)\n",
    "cv_scores = cross_val_score(KNeighborsClassifier(n_neighbors=5), X, y, cv=5)\n",
    "print(\"CV Scores:\", cv_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(X_test.shape[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for k in range(1, 11):\n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    knn.fit(X_train, y_train)\n",
    "    y_pred = knn.predict(X_test)\n",
    "    print(f\"K={k} | Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_knn)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "KNN Performance Stability with Cross-Validation:\n",
    "\n",
    "The K-Nearest Neighbors model was first performing almost perfectly on the test set. This made me wonder if it was overfitting. To check if it was stable, I did 5-fold cross-validation.\n",
    "\n",
    "Cross-validation scores did not deviate at all between 98.3% and 99.9%. Consistent scores confirm that the model does a great job across multiple sections of data. This rules out that first high score happening due to overfitting. Instead, this confirms the efficiency of the model to predict output for this set of data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Evaluating KNN with Confusion Matrix and Varying K Values:\n",
    "\n",
    "To better understand the performance and stability of the K-Nearest Neighbors (KNN) classifier, we evaluated the model in two ways: testing across a range of K values and analyzing the confusion matrix.\n",
    "\n",
    "\n",
    "\n",
    "Then, we tested KNN on different values of K (1 to 10) to see how performance would vary when the size of the neighborhood changed. The model consistently performed well with high accuracy (greater than 99%) for all values tested, which shows that the model is not too sensitive to the choice of K for this dataset.\n",
    "\n",
    "\n",
    "\n",
    "To further validate the performance of the model, a confusion matrix was plotted. This gave us a clearer idea of how the classifier performed in terms of true positives, false positives, true negatives, and false negatives. The matrix showed that the model made hardly any mistakes only a few false positives and false negatives out of over 5000 instances reassuring us that the KNN model was highly specific and highly sensitive.\n",
    "\n",
    "\n",
    "\n",
    "Together, these procedures helped to validate that the model generalizes and does not just memorize patterns in training data. This further validates our confidence in KNN's accuracy for this classification problem.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random Forest - Model Evaluation\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
    "\n",
    "# Predict on test set\n",
    "y_pred_rf = rf_model.predict(X_test)\n",
    "\n",
    "# Evaluate performance\n",
    "print(\"Random Forest Model Performance:\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_rf))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred_rf))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred_rf))\n",
    "print(\"F1 Score:\", f1_score(y_test, y_pred_rf))\n",
    "print(\"\\n\")\n",
    "print(classification_report(y_test, y_pred_rf))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Load the dataset using the correct path\n",
    "df = pd.read_csv(\"hypertension_data 2 (1).csv\")\n",
    "\n",
    "\n",
    "# Drop rows with missing values (already cleaned earlier)\n",
    "df_cleaned = df.dropna()\n",
    "\n",
    "# Separate features and target\n",
    "X = df_cleaned.drop('target', axis=1)\n",
    "y = df_cleaned['target']\n",
    "\n",
    "# Initialize the model\n",
    "rf_model = RandomForestClassifier(random_state=42)\n",
    "\n",
    "# Perform 5-Fold Cross-Validation\n",
    "cv_scores = cross_val_score(rf_model, X, y, cv=5, scoring='accuracy')\n",
    "\n",
    "# Output results\n",
    "print(\"Random Forest CV Scores:\", cv_scores)\n",
    "print(\"Average CV Accuracy:\", np.mean(cv_scores))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Feature importance \n",
    "\n",
    "rf_model.fit(X, y)\n",
    "importances = rf_model.feature_importances_\n",
    "feature_importance = pd.Series(importances, index=X.columns).sort_values(ascending=False)\n",
    "print(feature_importance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedKFold, cross_val_score\n",
    "\n",
    "skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "scores = cross_val_score(RandomForestClassifier(random_state=42), X, y, cv=skf)\n",
    "print(\"Stratified CV scores:\", scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Random Forest Classifier\n",
    "\n",
    "Random Forest algorithm was applied to the hypertension dataset for the prediction of an individual being hypertensive or not. The model was trained using the preprocessed data and performed perfectly on the test set with all the significant evaluation metrics â€” accuracy, precision, recall, and F1 score scoring 1.00.\n",
    "\n",
    "To ensure that this was not a one-off or the result of data leakage, we executed stratified 5-fold cross-validation. Cross-validation also produced consistent results across all folds, with each fold yielding an accuracy of 1.00.\n",
    "\n",
    "We also executed feature importance analysis on the trained Random Forest model. The top features contributing towards the classification were:\n",
    "- cp (chest pain type)\n",
    "- thalach (max heart rate achieved)\n",
    "- oldpeak (ST depression)\n",
    "- ca (number of large vessels colored)\n",
    "\n",
    "These features align with known clinical markers, enhancing the model's interpretability. However, due to the extremely high and consistent performance, it needs to be noted that further testing on external or real-world datasets is necessary.\n",
    "\n",
    "Note: The model is likely overfitting.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Naive Bayes - Model Evaluation\n",
    "\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report\n",
    "\n",
    "# Predict on test set\n",
    "y_pred_nb = nb_model.predict(X_test)\n",
    "\n",
    "# Evaluate performance\n",
    "print(\"Naive Bayes Model Performance:\")\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred_nb))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred_nb))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred_nb))\n",
    "print(\"F1 Score:\", f1_score(y_test, y_pred_nb))\n",
    "print(\"\\n\")\n",
    "print(classification_report(y_test, y_pred_nb))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">5.2 Confusion Matrices</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Logistic regression \n",
    "\n",
    "from sklearn.metrics import ConfusionMatrixDisplay\n",
    "\n",
    "ConfusionMatrixDisplay.from_estimator(baseline_model, X_test, y_test, cmap='viridis')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The confusion matrix for Logistic Regression shows a well-balanced classification, with relatively few misclassifications between hypertensive and non-hypertensive individuals.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#SVM\n",
    "\n",
    "ConfusionMatrixDisplay.from_estimator(svm_model, X_test, y_test, cmap='viridis')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The SVM confusion matrix shows good performance overall, though with slightly more false negatives than other models, indicating a few hypertensive cases were missed.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#kNN\n",
    "\n",
    "ConfusionMatrixDisplay.from_estimator(knn_model, X_test, y_test, cmap='viridis')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "KNN demonstrates extremely high accuracy, with almost perfect classification. However, such perfection may indicate overfitting and should be interpreted cautiously.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#RF\n",
    "\n",
    "ConfusionMatrixDisplay.from_estimator(rf_model, X_test, y_test, cmap='viridis')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The confusion matrix for Random Forest shows flawless performance on the test set, suggesting very strong predictive capability â€” though it may also point to overfitting.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ConfusionMatrixDisplay.from_estimator(nb_model, X_test, y_test, cmap='viridis')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Naive Bayes achieves reasonable performance, with a slightly higher number of misclassifications compared to tree-based models, yet still maintains strong generalization.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center> \n",
    "  <h3 style=\"color: lightblue; font-family: 'Trebuchet MS', sans-serif;\">5.3 Model Comparisons</h3>\n",
    "</center>\n",
    "\n",
    "<hr style=\"border: 1px solid lightblue; width: 50%;\">\n",
    "\n",
    "Comparison table or comparison summary, compare all metrics side by side and select and note which one can be the best, highlight if there is any presence of overfitting/underfitting, if any occurs, it will be a HUGE bonus to you if you can conquer it or discuss how you can conquer it.\n",
    "<br>\n",
    "<br>\n",
    "Bar plots or radar charts comparing model metrics since they asked for visualizations.\n",
    "<a id=\"models-comparison\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model Performance Comparison\n",
    "\n",
    "| Model               | Accuracy | Precision | Recall | F1 Score |\n",
    "|--------------------|----------|-----------|--------|----------|\n",
    "| Logistic Regression| 0.856     | 0.839     | 0.917  | 0.876    |\n",
    "| SVM                | 0.754     | 0.747     | 0.841  | 0.791    |\n",
    "| K-Nearest Neighbors| 0.997     | 0.998     | 0.997  | 0.997    |\n",
    "| Random Forest      | 1.000     | 1.000     | 1.000  | 1.000    |\n",
    "| Naive Bayes        | 0.829     | 0.833     | 0.867  | 0.849    |\n",
    "\n",
    "\n",
    "\n",
    " Although Random Forest and KNN models achieved near-perfect scores, this might be an indicator of overfitting. Logistic Regression and Naive Bayes offer more realistic and generalizable performance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Comparison BarPlot\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "models = ['Logistic Regression', 'SVM', 'KNN', 'Random Forest', 'Naive Bayes']\n",
    "accuracy = [0.856, 0.754, 0.997, 1.0, 0.829]\n",
    "precision = [0.839, 0.747, 0.998, 1.0, 0.833]\n",
    "recall = [0.917, 0.841, 0.997, 1.0, 0.867]\n",
    "f1 = [0.876, 0.791, 0.997, 1.0, 0.849]\n",
    "\n",
    "x = np.arange(len(models))\n",
    "width = 0.2\n",
    "\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.bar(x - 1.5*width, accuracy, width, label='Accuracy')\n",
    "plt.bar(x - 0.5*width, precision, width, label='Precision')\n",
    "plt.bar(x + 0.5*width, recall, width, label='Recall')\n",
    "plt.bar(x + 1.5*width, f1, width, label='F1 Score')\n",
    "\n",
    "plt.xlabel('Models')\n",
    "plt.ylabel('Scores')\n",
    "plt.title('Performance Comparison of ML Models')\n",
    "plt.xticks(x, models, rotation=20)\n",
    "plt.ylim(0.7, 1.05)\n",
    "plt.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Best Performing Model:**  \n",
    "Random Forest achieved perfect scores across all metrics. However, due to its extremely high performance, there's a strong possibility of overfitting. KNN also performed exceptionally well but may share similar concerns.\n",
    "\n",
    "**Weakest Performing Model:**  \n",
    "SVM had the lowest accuracy, precision, and F1 score among all classifiers, indicating that it was the least effective for this dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h3>5.4 Visualizations</h3></center>\n",
    "\n",
    "\n",
    "Accuracy vs Models (you will find plenty of graphs like this in any experiment online it's easy, talk to me if u want one)\n",
    "\n",
    "ROC Curves (If the task is binary classification.. as I am not sure since you didn't show me the dataset..) <br>\n",
    "Feature Importance for every Model <br>\n",
    "Accuracy Before and After Hypertuning\n",
    "\n",
    "<a id=\"visualizations\"></a>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "<center><h2>6.0 Conclusion</h2></center>\n",
    "Summary of insights.\n",
    "\n",
    "Best performing model (maybe you can also mention the least performing and why).\n",
    "\n",
    "Challenges encountered.\n",
    "\n",
    "[Put more sections if needed, if you want to put more plots or so or anything]\n",
    "\n",
    "---\n",
    "\n",
    "<a id=\"conclusion\"></a>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><h2>7.0 (Optional) GitHub Repository</h2></center>\n",
    "Link to the repo.\n",
    "\n",
    "Mention of README, documentation, and structure.\n",
    "\n",
    "Wiki or additional markdown files if added, I am not experienced or know how to do these :( \n",
    "\n",
    "You can consider also maybe making an additional PowerPoint presentation from Canva or something to summarize this project?... \n",
    "\n",
    "<a id=\"github-repo\"></a>\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

Add hypertension project notebook
